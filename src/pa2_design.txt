		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Namrata Bakre <nbakre@buffalo.edu>
Ashish Naware <ashishav@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

	-> We modified load() function in process.c to extract the user program arguments. We used strtok_r to separate out the arguments and stored those values in an array which we passed to setup_stack. We further modified setup_stack() where we pushed all the arguments on the stack. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
	-> strtok uses global data which is unsafe for use in threaded programs. So the pintos use strtok_r which does not use global data.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

	-> provides security by executing commands at user space thus secures kernel. 
	-> It is more efficient since there is no need to leave user space and go to kernel space.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	-> static bool is_valid_pointer(const void *usr_add);
		takes pointer to the address as input and checks that the address lies in the user space, and is mapped inside the page directory of the thread.
	->struct file *search_file(int fd_num);
		this function searches the open file with corresponding fd_num in thread's open files list
	->static int file_count = 2;
		This variable is used to number the open files. since file descriptor 0 and 1 are reserved, this variable is initialized to 2.

	->struct lock file_lock;
		lock that ensures that multiple processes does not modify the same file
	->struct file_descriptor;
		the structure that keeps record of file descriptor with corresponding file.
	->struct semaphore *cust_sema;
		this semaphore makes the parent wait till the child process is loaded
    	->struct list open_files;
		holds the list of all open files in the thread
    	->struct semaphore *exec_sema;
		this semaphore makes the parent thread wait for the child process to execute
    	->struct list children;
		holds all children threads of parent
    	->struct list_elem child_elem;
		list elem that helps to iterates through the children list
    	->int exit_status;
		records the exit status of child
    	->bool child_loaded;
		indicates if the child is loaded successfully


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	-> Each process has an independent set of file descriptor. They are unique only within a process. Each file has a unique file descriptor that gets incremented by 1. file descriptors 0 and 1 are reserved hence we create file descriptor from 2.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
	-> we first check if the address that is being pointed is in user space.
	-> In write system call, if the file descriptor is 1, then we write the data to the console using putbuf().
	-> both read and write calls take 3 arguments. fd, buffer and size. we take these values from the stack.
        -> for read,we take fd, buffer and size in invoke a file_read() from filesys/file.c and store the off_t value obtained from that call to eax register
	-> similarly for write operation, we take similar inputs as of read and then check if the fd is 1 and we invoke putbuf() to write to the console in that case. Otherwise we check if there is any invalid fd value getting passed and immediately terminate the process in that case. Then we check the file descriptor value and search corresponding open file in the thread then write to that file by invoking file_write and return the bytes written.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

	->The number of calls to pagedir_get_page() for a full page is 4096, since each byte is called.
	->For a system call that only copies 2 bytes of data, the number of inspections would be two.
	-> These number can be improved by reading multiple bytes at each call. This would require at least one inspection.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
	-> our wait system call accepts tid of child on which its parent should wait. Since the parent thread is running, we iterate through the children list of parent and then check if there is a child thread available whose tid matches with input tid. If it is matched then we make the parent wait for child by implementing sema_down(). once the child completes its execution it wakes the parent and then we return the exit status of the child. If no child is found or if the children list is empty, we return -1 to syscall_handler.
	

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

	-> We modified page_fault() and kill() in exception.c in order to handle the exceptions caused by invalid memory access. If the fault is caused by kernel then we do not kill the process, instead we set eip back to where fault occured in syscall handler and we set eax to 0xffffffff, so the kernel continues its execution from next line.
	-> we modified kill() so that the thread exits by printing it's exit status.
	-> we also wrote is_valid_pointer() function which checks if the address being pointed lies below PHYS_BASE, if it does, we terminate the process.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

	-> In our implementation we used semaphore cust_sema to ensure that parent waits till child is loaded/failed loading. We then record status of child in child_loaded variable. if it is not loaded successfully we return -1.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

	-> We were not able to successfully implement exec and wait. However, we considered implementing the approach where we used thread_yield() function to wake up parent after child successfully loaded its executable. Once the parent calls wait(C) it further waits for the child using semaphore exec_sema for its execution. Once the child exits, it stores its exit status in exit_status and invokes sema_up which wakes the parent. Later it returns and stores the child's exit status in eax register.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
	-> We implemented access to user memory from the kernel by comparing the address with PHYS_BASE. if it lies at kernel space then we immediately terminated the process.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
	-> we designed a struct file_descriptor which kept track of file descriptor for corresponding open file. It has advantages since we can add the structure in the list and hence we can easily retrieve the information.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
	-> we did not change the mapping

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
	too hard. especially exec-once test.
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
